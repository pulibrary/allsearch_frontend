var DragDropTouch,
  StackMap = StackMap || {
    domain: 'https://princeton.stackmap.com',
    popupCounter: 0,
    maxRequestSize: 20,
    delayImgLoad: !0,
    mobile: !1,
    showBookTitle: !0,
    setup: function () {
      (StackMap.boxHeight = Math.max(
        document.documentElement.clientHeight,
        window.innerHeight || 0
      )),
        /Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
          navigator.userAgent
        ) &&
          (StackMap.mobile = Math.max(
            document.documentElement.clientHeight,
            window.innerHeight || 0
          ));
      var t = document.documentElement;
      t.addEventListener('click', function (t) {
        var e = StackMap.utils.getEventTarget(t);
        if (StackMap.utils.hasClass(e, 'SMclose'))
          t.preventDefault(), t.stopPropagation(), StackMap.hideAllPopups(t);
        else if (StackMap.utils.hasClass(e, 'SMprinter-friendly')) {
          var a;
          t.preventDefault(), t.stopPropagation();
          var n = (a = t.srcElement
              ? t.srcElement.closest('.SMpopup')
              : t.target.closest('.SMpopup')).getAttribute('data-callno'),
            o = a.getAttribute('data-location'),
            i = a.getAttribute('data-library'),
            r = a.getAttribute('data-title');
          StackMap.openPrinterFriendly(n, o, i, r);
        }
      }),
        t.addEventListener('keydown', function (t) {
          var e = document.querySelector('.SMpopup-show'),
            a = t.target.classList.contains('SMsearchbtn'),
            n = StackMap.mapZoomer;
          if (
            (!a ||
              ('Enter' !== t.key && ' ' !== t.key) ||
              (t.preventDefault(),
              t.stopImmediatePropagation(),
              t.stopPropagation(),
              t.target.click()),
            e && n)
          ) {
            var o = e.querySelector('.SMmap'),
              i = { left: parseInt(o.style.left), top: parseInt(o.style.top) };
            switch (t.key) {
              case 'Escape':
                StackMap.hideAllPopups(t);
                break;
              case 'ArrowDown':
                t.preventDefault(), n.moveMap(i.left, i.top + 10);
                break;
              case 'ArrowUp':
                t.preventDefault(), n.moveMap(i.left, i.top - 10);
                break;
              case 'ArrowRight':
                t.preventDefault(), n.moveMap(i.left + 10, i.top);
                break;
              case 'ArrowLeft':
                t.preventDefault(), n.moveMap(i.left - 10, i.top);
            }
          }
        });
    },
    scrapeDom: function () {
      for (
        var t,
          e,
          a,
          n,
          o,
          i = { holding: [], alt: !0 },
          r = (document.querySelector('.result-content-records'), []),
          l = document.querySelectorAll('tr.holding-block:not(.sm-checked)'),
          c = 0;
        c < l.length &&
        ((t = l[c]), !(i.holding.length >= StackMap.maxRequestSize));
        c++
      ) {
        if (
          (StackMap.utils.addClass(t, 'sm-checked'),
          (u = t.querySelector('[data-map-location]')))
        ) {
          var s = document.querySelectorAll('[itemprop="name"]');
          (a = {
            library: StackMap.utils.text(t.querySelector('.location-text')),
            location: u.dataset.mapLocation,
            callno: StackMap.utils.text(
              t.querySelector('.holding-call-number').childNodes[0]
            ),
            title: s ? StackMap.utils.text(s) : ''
          }),
            (e = {
              library: StackMap.utils.translateLibrary(a),
              location: StackMap.utils.translateLocation(a),
              callno: StackMap.utils.translateCallno(a),
              title: StackMap.utils.translateTitle(a)
            }),
            StackMap.utils.exitEarly(e) ||
              ((n = e.library + '$$' + e.location + '$$' + e.callno),
              (o = t.querySelector('.library-location')),
              e.title &&
                StackMap.showBookTitle &&
                o.setAttribute('data-title', e.title),
              i.holding.push(n),
              r.push(o));
        }
      }
      for (
        var d = document.querySelectorAll('li.holding-status:not(.sm-checked)'),
          p = 0;
        p < d.length;
        p++
      )
        if ((t = d[p])) {
          if (i.holding.length >= StackMap.maxRequestSize) break;
          var u;
          if (
            (StackMap.utils.addClass(t, 'sm-checked'),
            (u = t.querySelector('[data-map-location]')))
          ) {
            var m = t.querySelector('.results_location');
            if (m) {
              var h = t.closest('.record-wrapper');
              (a = {
                library: StackMap.utils.text(m),
                location: u.dataset.mapLocation,
                callno: StackMap.utils.text(
                  t.querySelector('.call-number').childNodes[0]
                ),
                title: h
                  ? StackMap.utils.text(h.querySelector('.index_title a'))
                  : ''
              }),
                (e = {
                  library: StackMap.utils.translateLibrary(a),
                  location: StackMap.utils.translateLocation(a),
                  callno: StackMap.utils.translateCallno(a),
                  title: StackMap.utils.translateTitle(a)
                }),
                StackMap.utils.exitEarly(e) ||
                  ((n = e.library + '$$' + e.location + '$$' + e.callno),
                  console.log(n),
                  ((o = t.querySelector('.call-number')).dataset.smdisplay =
                    'inline'),
                  e.title &&
                    StackMap.showBookTitle &&
                    o.setAttribute('data-title', e.title),
                  i.holding.push(n),
                  r.push(o));
            }
          }
        }
      0 !== i.holding.length && StackMap.getJson(i, r, 'jsonp');
    },
    partitionQueriesAndSend: function (t, e) {
      if (Object.keys(t).length) {
        e || StackMap.getJson;
        for (var a in t) {
          var n = t[a].entries,
            o = t[a].request;
          StackMap.getJson(o, n, 'jsonp', a);
        }
      }
    },
    getAsUriParameters: function (a) {
      return Object.keys(a)
        .map(function (t) {
          if (Array.isArray(a[t])) {
            var e = encodeURIComponent(t + '[]');
            return a[t]
              .map(function (t) {
                return e + '=' + encodeURIComponent(t);
              })
              .join('&');
          }
          return encodeURIComponent(t) + '=' + encodeURIComponent(a[t]);
        })
        .join('&');
    },
    jsonpWrapper: function (e, a, n) {
      var o = 'jsonp_callback_' + Math.floor(1e5 * Math.random());
      return (
        (window[o] = function (t) {
          e(t, a, n), delete window[o];
        }),
        o
      );
    },
    loadJSONP: function (t, e, a) {
      var n = window.document.getElementsByTagName('script')[0],
        o = window.document.createElement('script');
      (o.src = t + (t.indexOf('?') + 1 ? '&' : '?') + 'callback=' + e),
        n.parentNode.insertBefore(o, n),
        (o.onload = function () {
          this.remove();
        });
    },
    getJson: function (t, e, a, n) {
      if ('jsonp' === a) {
        var o = StackMap.domain + '/json/?callback=?';
        n && (o = n + '/json/?callback=?'),
          (o = o + '&' + StackMap.getAsUriParameters(t));
        var i = StackMap.jsonpWrapper(StackMap.buildMapAndButtons, t, e);
        StackMap.loadJSONP(o, i);
      }
    },
    logClick: function (t) {
      var e = StackMap.getDomain(t.library) + '/logmapit/?callback=?';
      e = e + '&' + StackMap.getAsUriParameters(t);
      StackMap.loadJSONP(e, function () {
        return !0;
      });
    },
    buildMapAndButtons: function (t, e, a) {
      for (var n = 0; n < a.length; n++) {
        var o = t.results[n];
        if (0 !== o.maps.length) {
          var i = o.maps[0],
            r = document.createElement('div');
          StackMap.utils.addClass(r, 'SMpopup'),
            (r.id = 'SM' + StackMap.popupCounter),
            (r.dataset.callno = o.callno);
          var l = o.location;
          a[n].querySelector('[data-location-name]') &&
            (l = a[n].querySelector('[data-location-name]').dataset
              .locationName),
            (r.dataset.location = o.location);
          var c = o.library;
          (r.dataset.library = c),
            (r.dataset.title = a[n].dataset.title
              ? a[n].dataset.title
              : i.library + ', ' + i.floorname),
            (r.tabIndex = '0');
          var s = document.createElement('button'),
            d = document.createElement('i');
          StackMap.utils.addClass(s, 'SMclose'),
            StackMap.utils.addClass(d, ['fa', 'fa-times', 'fa-1x', 'SMclose']),
            d.setAttribute('aria-hidden', 'true'),
            s.setAttribute('aria-label', 'Close map & directions'),
            s.appendChild(d);
          var p = document.createElement('span');
          s.appendChild(p),
            (p.textContent = 'Close map & directions'),
            p.classList.add('SMsr-only');
          var u = document.createElement('button');
          u.setAttribute('aria-label', 'Print map');
          var m = document.createElement('i');
          u.appendChild(m),
            m.setAttribute('aria-hidden', 'true'),
            StackMap.utils.addClass(u, 'SMprinter-friendly'),
            StackMap.utils.addClass(m, [
              'fa',
              'fa-print',
              'fa-1x',
              'SMprinter-friendly'
            ]);
          var h = document.createElement('span');
          u.appendChild(h),
            (h.textContent = 'Print map'),
            h.classList.add('SMsr-only');
          var f = document.createElement('div');
          StackMap.utils.addClass(f, 'SMheader');
          var g,
            S = document.createElement('h1');
          (g = a[n].dataset.title
            ? ((g = a[n].getAttribute('data-title')),
              document.createTextNode(g))
            : document.createTextNode(i.library + ', ' + i.floorname)),
            S.appendChild(g),
            f.appendChild(S);
          var v = document.createElement('div');
          v.appendChild(u),
            v.appendChild(s),
            StackMap.utils.addClass(v, 'SMheaderbtns'),
            f.appendChild(v),
            r.appendChild(f);
          var y = document.createElement('img');
          StackMap.utils.addClass(y, ['SMmap']);
          var M =
            'Location of item with callnumber ' +
            o.callno +
            ' is ' +
            c +
            ', ' +
            i.floorname;
          y.setAttribute('alt', M),
            y.setAttribute('draggable', 'true'),
            StackMap.delayImgLoad
              ? y.setAttribute('othersrc', i.mapurl + '&marker=1')
              : y.setAttribute('src', i.mapurl + '&marker=1'),
            y.setAttribute('data-original-width', i.width),
            y.setAttribute('data-original-height', i.height);
          var C = document.createElement('div');
          StackMap.utils.addClass(C, ['SMcontent-box']), r.appendChild(C);
          var b = document.createElement('div');
          StackMap.utils.addClass(b, ['SMmap-container']), C.appendChild(b);
          var k = document.createElement('ul');
          StackMap.utils.addClass(k, 'SMmap-buttons'), b.appendChild(k);
          var _ = document.createElement('li'),
            E = document.createElement('li'),
            w = document.createElement('li'),
            x = document.createElement('button'),
            A = document.createElement('button'),
            L = document.createElement('button');
          StackMap.utils.addClass(x, 'zoom-in'),
            StackMap.utils.addClass(A, 'zoom-out'),
            StackMap.utils.addClass(L, 'zoom-fit');
          var T = document.createElement('i'),
            z = document.createElement('i'),
            D = document.createElement('i');
          StackMap.utils.addClass(T, [
            'fa',
            'fa-plus-circle',
            'SMicon',
            'fa-1x'
          ]),
            StackMap.utils.addClass(z, [
              'fa',
              'fa-minus-circle',
              'SMicon',
              'fa-1x'
            ]),
            StackMap.utils.addClass(D, ['fa', 'fa-arrows', 'SMicon', 'fa-1x']),
            T.setAttribute('aria-hidden', 'true'),
            z.setAttribute('aria-hidden', 'true'),
            D.setAttribute('aria-hidden', 'true');
          var P = document.createElement('span'),
            I = document.createElement('span'),
            q = document.createElement('span'),
            H = document.createTextNode('zoom in'),
            N = document.createTextNode('zoom out'),
            W = document.createTextNode('entire map');
          P.appendChild(H),
            I.appendChild(N),
            q.appendChild(W),
            x.appendChild(T),
            A.appendChild(z),
            L.appendChild(D),
            x.appendChild(P),
            A.appendChild(I),
            L.appendChild(q),
            _.appendChild(x),
            E.appendChild(A),
            w.appendChild(L),
            k.appendChild(_),
            k.appendChild(E),
            k.appendChild(w);
          var B = document.createElement('div');
          StackMap.utils.addClass(B, 'SMmap-window'),
            B.appendChild(y),
            b.appendChild(B);
          var F = document.createElement('div');
          StackMap.utils.addClass(F, 'SMmore-info'), C.appendChild(F);
          var O = document.createElement('ul');
          F.appendChild(O);
          var Y = document.createElement('li'),
            X = document.createElement('p');
          StackMap.utils.addClass(X, 'SMdirectionstxt');
          var R = document.createElement('span');
          (R.textContent = 'This pin'), X.appendChild(R);
          var j = document.createElement('i');
          j.setAttribute('aria-hidden', 'true'),
            StackMap.utils.addClass(j, [
              'fa',
              'fa-map-marker',
              'fa-1x',
              'SMdirections'
            ]),
            X.appendChild(j);
          var Z = document.createElement('span');
          (Z.textContent = "indicates your item's location on the map"),
            X.appendChild(Z),
            Y.appendChild(X),
            O.appendChild(Y);
          var U = document.createElement('li');
          O.appendChild(U);
          var $ = document.createElement('h2');
          ($.textContent = 'Directions:'), U.appendChild($);
          var J = document.createElement('p');
          StackMap.utils.addClass(J, 'SMemph'),
            (J.innerHTML = i.directions),
            U.appendChild(J);
          var K = document.createElement('li'),
            G = document.createElement('h3');
          (G.textContent = 'This item is in the following Collection:'),
            K.appendChild(G);
          var Q = document.createElement('p');
          (Q.textContent = l),
            Q.classList.add('SMemph'),
            K.appendChild(Q),
            O.appendChild(K);
          if (!['Firestone Library'].includes(o.library)) {
            var V = document.createElement('li'),
              tt = document.createElement('h3');
            (tt.textContent = 'Go to the row labelled:'), V.appendChild(tt);
            var et = document.createElement('p');
            (et.textContent = i.ranges[0].rangename),
              et.classList.add('SMemph'),
              V.appendChild(et),
              O.appendChild(V);
          }
          var at = document.createElement('li'),
            nt = document.createElement('h3');
          (nt.textContent = 'Look for this item:'),
            at.appendChild(nt),
            O.appendChild(at);
          var ot = 'SM' + n + '-callno',
            it = document.createElement('li');
          O.appendChild(it);
          var rt = document.createElement('p');
          (rt.id = ot),
            (rt.textContent = o.callno),
            rt.classList.add('SMbold'),
            rt.classList.add('SMemph'),
            it.appendChild(rt);
          var lt = document.createElement('li');
          O.appendChild(lt);
          var ct = document.createElement('a'),
            st =
              StackMap.domain +
              '/view/?' +
              StackMap.getAsUriParameters({
                callno: o.callno,
                location: o.location,
                library: o.library,
                tt: 0
              });
          a[n].getAttribute('data-title') &&
            a[n].getAttribute('data-title').length &&
            (st +=
              '&' +
              StackMap.getAsUriParameters({
                title: a[n].getAttribute('data-title')
              })),
            (ct.href = st),
            (ct.target = '_blank'),
            (ct.rel = 'noreferrer noopener'),
            (ct.innerText = 'Shareable map'),
            ct.classList.add('SMshareable-link'),
            lt.appendChild(ct);
          var dt = document.createElement('p'),
            pt = document.createElement('span');
          StackMap.utils.addClass(dt, 'SMpowered-by');
          var ut = document.createElement('a');
          StackMap.utils.addClass(ut, 'SMpowered-by-link'),
            ut.setAttribute('href', 'https://stackmap.com'),
            ut.setAttribute('target', '_blank');
          var mt = document.createTextNode('StackMap.com'),
            ht = document.createTextNode('Powered by');
          ut.appendChild(mt),
            pt.appendChild(ht),
            dt.appendChild(pt),
            dt.appendChild(ut),
            r.appendChild(dt);
          var ft = document.getElementsByTagName('body')[0],
            gt = document.createElement('div');
          gt.setAttribute('aria-hidden', 'true'),
            StackMap.utils.addClass(gt, 'SMblock-screen'),
            gt.appendChild(r),
            ft.appendChild(gt);
          var St = document.createElement('button');
          StackMap.utils.addClass(St, ['SMButton', 'SMsearchbtn']),
            St.setAttribute('type', 'button'),
            (St.style.margin = '0'),
            (St.style.position = 'relative'),
            (St.dataset.popupid = 'SM' + StackMap.popupCounter),
            (St.onclick = StackMap.showPopup);
          var vt = document.createElement('i'),
            yt = document.createElement('span');
          if (
            ((yt.textContent = 'Where to find it'),
            StackMap.utils.addClass(vt, ['fa', 'fa-map-marker', 'searchIcon']),
            vt.setAttribute('aria-hidden', 'true'),
            St.appendChild(yt),
            St.appendChild(vt),
            'table' === a[n].dataset.smdisplay && 'TR' === a[n].nodeName)
          )
            var Mt = document.createElement('td');
          else
            Mt =
              'inline' === a[n].dataset.smdisplay
                ? document.createElement('span')
                : document.createElement('div');
          (Mt.style.padding = '2px'), Mt.appendChild(St), a[n].appendChild(Mt);
          var Ct = Mt.closest('table');
          if (Ct && 'table' === a[n].dataset.smdisplay) {
            var bt = Ct.querySelector('tbody tr').querySelectorAll('td'),
              kt = Ct.querySelector('thead tr'),
              _t = kt.querySelectorAll('th');
            if (bt.length > _t.length) {
              var Et = document.createElement('th');
              kt.appendChild(Et);
            }
          }
          StackMap.popupCounter++;
        }
      }
    },
    openPrinterFriendly: function (t, e, a, n) {
      var o =
        StackMap.getDomain(a) +
        '/view/?' +
        StackMap.getAsUriParameters({
          v: 'pf',
          callno: t,
          location: e,
          library: a,
          title: n,
          tt: 0
        });
      return (
        window.open(
          o,
          'stackmap',
          'width=950,height=800,toolbar=no,directories=no,scrollbars=1,location=no,menubar=no,status=no,left=0,top=0'
        ),
        !1
      );
    },
    showPopup: function (t, e) {
      'function' == typeof window.StackMapPopupCallback &&
        window.StackMapPopupCallback(),
        (e = e || this.dataset.popupid);
      var a = document.getElementById(e),
        n = a.closest('.SMblock-screen'),
        o = a.querySelector('.SMmap');
      ((t = t || window.event).cancelBubble = !0),
        t.stopPropagation && t.stopPropagation(),
        StackMap.delayImgLoad &&
          o.setAttribute('src', o.getAttribute('othersrc')),
        StackMap.logClick({
          callno: a.dataset.callno,
          library: a.dataset.library,
          location: a.dataset.location,
          action: 'mapit'
        }),
        StackMap.utils.addClass(a, 'SMpopup-show');
      var i = {
        container: n,
        originalWidth: parseInt(o.dataset.originalWidth),
        originalHeight: parseInt(o.dataset.originalHeight)
      };
      StackMap.utils.addClass(n, 'SMblock-screen-on'),
        n.setAttribute('aria-hidden', 'false'),
        (n.onmousedown = StackMap.utils.handleContainerClick),
        (StackMap.mapZoomer = new StackMap.utils.StackMapZoomMap(i)),
        a.focus();
    },
    hideAllPopups: function (t) {
      var e,
        a = document.getElementsByClassName('SMblock-screen-on'),
        n = document.querySelector('.SMpopup-show');
      if (n) {
        e = n.id;
        var o = document.querySelector(
          '.SMsearchbtn[data-popupid="' + e + '"]'
        );
      }
      if (a)
        for (var i = 0; i < a.length; i++) {
          var r = a[i];
          r.setAttribute('aria-hidden', 'true'),
            StackMap.utils.removeClass(r, 'SMblock-screen-on');
        }
      return o && o.focus(), StackMap.utils.removeClass(n, 'SMpopup-show'), !1;
    },
    getDomain: function (t, e) {
      var a = {},
        n = e || StackMap.domain;
      return a[t] ? a[t] : n;
    },
    utils: {
      ancestorForSelector: function (t, e) {
        for (; t && !StackMap.utils.hasClass(t, e); ) t = t.parentNode;
        return t;
      },
      ancestorForDialogContainer: function (t) {
        for (; t && !StackMap.utils.hasClass(t, 'md-dialog-container'); )
          t = t.parentNode;
        return t;
      },
      reScanRecord: function (t) {
        var e = ['', 'searching', 'searching...'];
        return (
          !!e.includes(t.library.toLowerCase()) ||
          !!e.includes(t.location.toLowerCase()) ||
          !!e.includes(t.callno.toLowerCase())
        );
      },
      exitEarly: function (t) {
        return !t.callno || !t.library || !t.location;
      },
      text: function (t) {
        return t
          ? t.textContent
            ? t.textContent.trim()
            : t.innerText
              ? t.innerText.trim().replace('\n', ' ')
              : ''
          : '';
      },
      hasClass: function (t, e) {
        return -1 < (' ' + t.className + ' ').indexOf(' ' + e + ' ');
      },
      removeClass: function (t, e) {
        t.classList ? t.classList.remove(e) : t.className.replace(e, '');
      },
      addClass: function (t, e) {
        if (Array.isArray(e))
          for (var a = !!t.classList, n = 0; n < e.length; n++) {
            var o = e[n];
            a ? t.classList.add(o) : (t.className += o);
          }
        else t.classList ? t.classList.add(e) : (t.className += e);
      },
      getEventTarget: function (t) {
        return (t = t || window.event).target || t.srcElement;
      },
      getOffset: function (t) {
        for (
          var e = 0, a = 0;
          t && !isNaN(t.offsetLeft) && !isNaN(t.offsetTop);

        )
          (e += t.offsetLeft - t.scrollLeft),
            (a += t.offsetTop - t.scrollTop),
            (t = t.offsetParent);
        return { top: a, left: e };
      },
      round: function (t, e) {
        var a = Math.pow(10, e),
          n = t * a;
        return Math.round(n) / a;
      },
      StackMapZoomMap: function (t) {
        var c = this;
        (c.boxHeight = +t.boxWidth || 510),
          (c.boxWidth = +t.boxWidth || 680),
          (c.container =
            t.container || document.getElementById('SMmap-container')),
          (c.fitX = 0),
          (c.fitY = 0),
          (c.lockEdges = !1),
          (c.mapSelector = '.SMmap'),
          (c.originalWidth = t.originalWidth || 800),
          (c.originalHeight = t.originalHeight || 600),
          (c.windowSelector = '.SMmap-window'),
          (c.zoomFactor = 0.1),
          (c.zoomFit = StackMap.mobile ? 0.3 : 0.25),
          (c.zoomFitBtn = '.zoom-fit'),
          (c.zoomInBtn = '.zoom-in'),
          (c.zoomMin = 0.1),
          (c.zoomMax = 2),
          (c.zoomOutBtn = '.zoom-out'),
          (c.mapWindow = c.container.querySelector(c.windowSelector)),
          (c.map = c.mapWindow.querySelector(c.mapSelector)),
          (c.popupWindow = c.mapWindow.querySelector('.SMpopup')),
          (c.halfBoxHeight = +c.boxHeight),
          (c.halfBoxWidth = +c.boxWidth),
          (c.curZoomFactor = 1),
          (c.zoomFactorElem = c.mapWindow.querySelector(c.zoomFactorSelector)),
          -1 == c.zoomFit && (c.zoomFit = c.zoomMin),
          (c.curSize = { x: 0, y: 0 }),
          (c.mousePosition = { x: 0, y: 0 }),
          (c.calculateCenterCoords = function (t, e) {
            var a = t.getBoundingClientRect(),
              n = e.getBoundingClientRect(),
              o = Math.ceil(a.height / 2),
              i = Math.ceil(a.width / 2),
              r = Math.ceil(n.height / 2);
            return { x: i - Math.ceil(n.width / 2), y: o - r };
          }),
          (c.getMapSizeRatio = function () {
            return c.originalHeight / c.curSize.y;
          }),
          (c.updateOverlaySize = function () {
            for (var t, e, a, n, o = 0; o < c.sizeXContents.length; o++)
              c.sizeXContents[o].setAttribute('width', c.curSize.x + 'px');
            for (var i = 0; i < c.sizeYContents.length; i++)
              c.sizeYContents[i].setAttribute('height', c.curSize.y + 'px');
            for (var r = 0; r < c.locXContents.length; r++)
              (t = c.locXContents[r]),
                (e = parseInt(t.dataset.x) / c.getMapSizeRatio()),
                (t.style.left = e + 'px');
            for (var l = 0; l < c.locYContents.length; l++)
              (a = c.locYContents[l]),
                (n = parseInt(a.dataset.y) / c.getMapSizeRatio()),
                (a.style.top = n + 'px');
          }),
          (c.resetMapByHeight = function () {
            var t = c.boxHeight / c.originalHeight;
            c.setZoomFactor(t, !1);
            var e = (c.boxWidth - c.curSize.x) / 2;
            c.moveMap(e, 0);
          }),
          (c.resetMapByWidth = function () {
            var t = c.boxWidth / c.originalWidth;
            c.setZoomFactor(t, !1);
            var e = (c.boxHeight - c.curSize.y) / 2;
            c.moveMap(0, e);
          }),
          (c.resetMap = function (t) {
            var e;
            (e = c.mapWindow.getBoundingClientRect()),
              (c.boxHeight = e.height),
              (c.boxWidth = e.width),
              c.boxHeight / c.boxWidth < c.originalHeight / c.originalWidth
                ? c.resetMapByHeight()
                : c.resetMapByWidth();
          }),
          (c.moveMap = function (t, e) {
            var a = t,
              n = e,
              o = { left: 0, right: 0, top: 0, bottom: 0 };
            (n = c.lockEdges
              ? ((o.right = -c.curSize.x + c.boxWidth),
                (o.top = -c.curSize.y + c.boxHeight),
                (a = 0 < (a = a < o.right ? o.right : a) ? 0 : a),
                0 < (n = n < o.top ? o.top : n) ? 0 : n)
              : ((o.top = 20 - c.curSize.y),
                (o.left = 20 - c.curSize.x),
                (o.right = c.boxWidth - 20),
                (o.bottom = c.boxHeight - 20),
                (a = (a = a < o.left ? o.left : a) > o.right ? o.right : a),
                (n = n < o.top ? o.top : n) > o.bottom ? o.bottom : n)),
              (c.map.style.left = a + 'px'),
              (c.map.style.top = n + 'px');
          }),
          (c.setZoomFactor = function (t, e) {
            if (((e = void 0 === e || e), c.curZoomFactor != t)) {
              t < c.zoomMin && (t = c.zoomMin),
                t > c.zoomMax && (t = c.zoomMax);
              var a = c.curZoomFactor - t,
                n = (c.originalWidth * a) / 2,
                o = (c.originalHeight * a) / 2,
                i = parseFloat(c.map.style.left) + n,
                r = parseFloat(c.map.style.top) + o;
              (c.curZoomFactor = t),
                (c.curSize.x = c.originalWidth * t),
                (c.curSize.y = c.originalHeight * t),
                (c.map.style.width = c.curSize.x + 'px'),
                (c.map.style.height = c.curSize.y + 'px'),
                e && c.moveMap(i, r);
            }
          }),
          (c.drag = !1);
        var o = null,
          i = null;
        function e(t) {
          t.preventDefault();
          var e = (t = t || window.event).target ? t.target : t.srcElement;
          t.type.toLowerCase();
          'SMmap' === e.className &&
            ((offsetX = t.clientX ? t.clientX : t.touches[0].clientX),
            (offsetY = t.clientY ? t.clientY : t.touches[0].clientY),
            e.style.left || (e.style.left = '0px'),
            e.style.top || (e.style.top = '0px'),
            (o = parseInt(e.style.left)),
            (i = parseInt(e.style.top)),
            (c.drag = !0));
        }
        function a(t) {
          if ((t.preventDefault(), c.drag)) {
            var e = (t = t || window.event).target ? t.target : t.srcElement,
              a = t.clientX ? t.clientX : t.touches[0].clientX,
              n = t.clientY ? t.clientY : t.touches[0].clientY;
            return (
              (e.style.left = o + a - offsetX + 'px'),
              (e.style.top = i + n - offsetY + 'px'),
              !1
            );
          }
        }
        function n(t) {
          t.currentTarget, c.container, (c.drag = !1);
        }
        function r(t) {
          if (
            'keydown' !== (t = t || window.event).type ||
            'Enter' === t.key ||
            ' ' === t.key
          ) {
            var e = 'wheel' === t.type ? 0.04 : c.zoomFactor,
              a = c.curZoomFactor - e;
            h(a), c.setZoomFactor(a, !0);
          }
        }
        function l(t) {
          if (
            'keydown' !== (t = t || window.event).type ||
            'Enter' === t.key ||
            ' ' === t.key
          ) {
            var e = 'wheel' === t.type ? 0.04 : c.zoomFactor,
              a = c.curZoomFactor + e;
            h(a), c.setZoomFactor(a, !0);
          }
        }
        function s(t) {
          ('keydown' === t.type && 'Enter' !== t.key && ' ' !== t.key) ||
            (h('reset'), c.resetMap(!0));
        }
        StackMap.mobile
          ? ((c.map.ontouchstart = e),
            (c.map.ontouchmove = a),
            (c.map.ontouchend = n))
          : ((c.map.onmousedown = e),
            (c.map.onmousemove = a),
            (c.map.onmouseup = n));
        var d = c.container.querySelector('.zoom-in');
        (d.onclick = l), (d.onkeydown = l);
        var p = c.container.querySelector('.zoom-out');
        (p.onclick = r), (p.onkeydown = r);
        var u = c.container.querySelector('.zoom-fit');
        (u.onclick = s), (u.onkeydown = s);
        function m(t) {
          t.preventDefault();
          var e = window.event || e,
            a = Math.sign(t.wheelDelta || -t.detail || e.deltaY);
          return 0 < a && l(t), a < 0 && r(t), !1;
        }
        (c.mapWindow.onscroll = m), (c.mapWindow.onwheel = m);
        var h = function (t) {
          var e = StackMap.utils.hasClass(d, 'sm-capped'),
            a = StackMap.utils.hasClass(p, 'sm-capped');
          if ('reset' === t)
            return (
              e && d.classList.remove('sm-capped'),
              void (a && p.classList.remove('sm-capped'))
            );
          t <= c.zoomMin && !a && p.classList.add('sm-capped'),
            t > c.zoomMin && a && p.classList.remove('sm-capped'),
            t >= c.zoomMax && !e && d.classList.add('sm-capped'),
            t < c.zoomMax && e && d.classList.remove('sm-capped');
        };
        c.resetMap(!0), l();
      },
      directionsButtonClick: function (t) {
        var e = t.target
          .closest('.SMcontent-box')
          .querySelector('.SMmore-info');
        e &&
          (e.classList.contains('hidden')
            ? (e.classList.remove('hidden'),
              (this.querySelector('span').textContent = 'Hide Directions'))
            : (e.classList.add('hidden'),
              (this.querySelector('span').textContent = 'Show Directions')));
      },
      handleContainerClick: function (t) {
        t.currentTarget &&
          t.currentTarget === t.target &&
          StackMap.hideAllPopups(t);
      },
      translateLibrary: function (t) {
        return t.library
          ? t.library.split(' - ')[0].replace(/(\s+)/gm, ' ').trim()
          : '';
      },
      translateLocation: function (t) {
        return t.location ? t.location.replace(/(\s+)/gm, ' ').trim() : '';
      },
      translateCallno: function (t) {
        return t.callno ? t.callno : '';
      },
      translateTitle: function (t) {
        return t.title ? t.title.replace(/^;/g, '').trim() : '';
      },
      translateAuthor: function (t) {
        if (!t.author) return '';
        var e = t.author.replace(/;/g, '').trim();
        return (
          75 < (e = e.replace(/\s+|\r|\t/g, ' ')).length &&
            (e = e.slice(0, 75) + '...'),
          e
        );
      },
      translateStatus: function (t) {
        return t.status ? t.status.trim() : '';
      }
    },
    init: function () {
      StackMap.setup();
      setInterval(function () {
        StackMap.scrapeDom();
      }, 1500);
    }
  };
function SMcontentLoaded(e, a) {
  var n = !1,
    t = !0,
    o = e.document,
    i = o.documentElement,
    r = o.addEventListener,
    l = r ? 'addEventListener' : 'attachEvent',
    c = r ? 'removeEventListener' : 'detachEvent',
    s = r ? '' : 'on',
    d = function (t) {
      ('readystatechange' == t.type && 'complete' != o.readyState) ||
        (('load' == t.type ? e : o)[c](s + t.type, d, !1),
        !n && (n = !0) && a.call(e, t.type || t));
    },
    p = function () {
      try {
        i.doScroll('left');
      } catch (t) {
        return void setTimeout(p, 50);
      }
      d('poll');
    };
  if ('complete' == o.readyState) a.call(e, 'lazy');
  else {
    if (!r && i.doScroll) {
      try {
        t = !e.frameElement;
      } catch (t) {}
      t && p();
    }
    o[l](s + 'DOMContentLoaded', d, !1),
      o[l](s + 'readystatechange', d, !1),
      e[l](s + 'load', d, !1);
  }
}
SMcontentLoaded(window, StackMap.init),
  (function (t) {
    'use strict';
    var e =
      (Object.defineProperty(a.prototype, 'dropEffect', {
        get: function () {
          return this._dropEffect;
        },
        set: function (t) {
          this._dropEffect = t;
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(a.prototype, 'effectAllowed', {
        get: function () {
          return this._effectAllowed;
        },
        set: function (t) {
          this._effectAllowed = t;
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(a.prototype, 'types', {
        get: function () {
          return Object.keys(this._data);
        },
        enumerable: !0,
        configurable: !0
      }),
      (a.prototype.clearData = function (t) {
        null !== t ? delete this._data[t] : (this._data = null);
      }),
      (a.prototype.getData = function (t) {
        return this._data[t] || '';
      }),
      (a.prototype.setData = function (t, e) {
        this._data[t] = e;
      }),
      (a.prototype.setDragImage = function (t, e, a) {
        var n = o._instance;
        (n._imgCustom = t), (n._imgOffset = { x: e, y: a });
      }),
      a);
    function a() {
      (this._dropEffect = 'move'),
        (this._effectAllowed = 'all'),
        (this._data = {});
    }
    t.DataTransfer = e;
    var o =
      ((c.getInstance = function () {
        return c._instance;
      }),
      (c.prototype._touchstart = function (t) {
        var e = this;
        if (this._shouldHandle(t)) {
          if (
            Date.now() - this._lastClick < c._DBLCLICK &&
            this._dispatchEvent(t, 'dblclick', t.target)
          )
            return t.preventDefault(), void this._reset();
          this._reset();
          var a = this._closestDraggable(t.target);
          a &&
            (this._dispatchEvent(t, 'mousemove', t.target) ||
              this._dispatchEvent(t, 'mousedown', t.target) ||
              ((this._dragSource = a),
              (this._ptDown = this._getPoint(t)),
              (this._lastTouch = t).preventDefault(),
              setTimeout(function () {
                e._dragSource == a &&
                  null === e._img &&
                  e._dispatchEvent(t, 'contextmenu', a) &&
                  e._reset();
              }, c._CTXMENU)));
        }
      }),
      (c.prototype._touchmove = function (t) {
        if (this._shouldHandle(t)) {
          var e = this._getTarget(t);
          if (this._dispatchEvent(t, 'mousemove', e))
            return void (this._lastTouch = t).preventDefault();
          if (this._dragSource && !this._img) {
            var a = this._getDelta(t);
            c._THRESHOLD < a &&
              (this._dispatchEvent(t, 'dragstart', this._dragSource),
              this._createImage(t),
              this._dispatchEvent(t, 'dragenter', e));
          }
          this._img &&
            ((this._lastTouch = t).preventDefault(),
            e != this._lastTarget &&
              (this._dispatchEvent(
                this._lastTouch,
                'dragleave',
                this._lastTarget
              ),
              this._dispatchEvent(t, 'dragenter', e),
              (this._lastTarget = e)),
            this._moveImage(t),
            this._dispatchEvent(t, 'dragover', e));
        }
      }),
      (c.prototype._touchend = function (t) {
        if (this._shouldHandle(t)) {
          if (this._dispatchEvent(this._lastTouch, 'mouseup', t.target))
            return void t.preventDefault();
          this._img ||
            ((this._dragSource = null),
            this._dispatchEvent(this._lastTouch, 'click', t.target),
            (this._lastClick = Date.now())),
            this._destroyImage(),
            this._dragSource &&
              (t.type.indexOf('cancel') < 0 &&
                this._dispatchEvent(this._lastTouch, 'drop', this._lastTarget),
              this._dispatchEvent(this._lastTouch, 'dragend', this._dragSource),
              this._reset());
        }
      }),
      (c.prototype._shouldHandle = function (t) {
        return t && !t.defaultPrevented && t.touches && t.touches.length < 2;
      }),
      (c.prototype._reset = function () {
        this._destroyImage(),
          (this._dragSource = null),
          (this._lastTouch = null),
          (this._lastTarget = null),
          (this._ptDown = null),
          (this._dataTransfer = new e());
      }),
      (c.prototype._getPoint = function (t, e) {
        return (
          t && t.touches && (t = t.touches[0]),
          { x: e ? t.pageX : t.clientX, y: e ? t.pageY : t.clientY }
        );
      }),
      (c.prototype._getDelta = function (t) {
        var e = this._getPoint(t);
        return Math.abs(e.x - this._ptDown.x) + Math.abs(e.y - this._ptDown.y);
      }),
      (c.prototype._getTarget = function (t) {
        for (
          var e = this._getPoint(t), a = document.elementFromPoint(e.x, e.y);
          a && 'none' == getComputedStyle(a).pointerEvents;

        )
          a = a.parentElement;
        return a;
      }),
      (c.prototype._createImage = function (t) {
        this._img && this._destroyImage();
        var e = this._imgCustom || this._dragSource;
        if (
          ((this._img = e.cloneNode(!0)),
          this._copyStyle(e, this._img),
          (this._img.style.top = this._img.style.left = '-9999px'),
          !this._imgCustom)
        ) {
          var a = e.getBoundingClientRect(),
            n = this._getPoint(t);
          (this._imgOffset = { x: n.x - a.left, y: n.y - a.top }),
            (this._img.style.opacity = c._OPACITY.toString());
        }
        this._moveImage(t), document.body.appendChild(this._img);
      }),
      (c.prototype._destroyImage = function () {
        this._img &&
          this._img.parentElement &&
          this._img.parentElement.removeChild(this._img),
          (this._img = null),
          (this._imgCustom = null);
      }),
      (c.prototype._moveImage = function (a) {
        var n = this;
        this._img &&
          requestAnimationFrame(function () {
            var t = n._getPoint(a, !0),
              e = n._img.style;
            (e.position = 'absolute'),
              (e.pointerEvents = 'none'),
              (e.zIndex = '999999'),
              (e.left = Math.round(t.x - n._imgOffset.x) + 'px'),
              (e.top = Math.round(t.y - n._imgOffset.y) + 'px');
          });
      }),
      (c.prototype._copyProps = function (t, e, a) {
        for (var n = 0; n < a.length; n++) {
          var o = a[n];
          t[o] = e[o];
        }
      }),
      (c.prototype._copyStyle = function (t, e) {
        if (
          (c._rmvAtts.forEach(function (t) {
            e.removeAttribute(t);
          }),
          t instanceof HTMLCanvasElement)
        ) {
          var a = t,
            n = e;
          (n.width = a.width),
            (n.height = a.height),
            n.getContext('2d').drawImage(a, 0, 0);
        }
        for (var o = getComputedStyle(t), i = 0; i < o.length; i++) {
          var r = o[i];
          r.indexOf('transition') < 0 && (e.style[r] = o[r]);
        }
        e.style.pointerEvents = 'none';
        for (var l = 0; l < t.children.length; l++)
          this._copyStyle(t.children[i], e.children[l]);
      }),
      (c.prototype._dispatchEvent = function (t, e, a) {
        if (t && a) {
          var n = document.createEvent('Event'),
            o = t.touches ? t.touches[0] : t;
          return (
            n.initEvent(e, !0, !0),
            (n.button = 0),
            (n.which = n.buttons = 1),
            this._copyProps(n, t, c._kbdProps),
            this._copyProps(n, o, c._ptProps),
            (n.dataTransfer = this._dataTransfer),
            a.dispatchEvent(n),
            n.defaultPrevented
          );
        }
        return !1;
      }),
      (c.prototype._closestDraggable = function (t) {
        for (; t; t = t.parentElement)
          if (t.hasAttribute('draggable') && t.draggable) return t;
        return null;
      }),
      c);
    function c() {
      if (((this._lastClick = 0), c._instance))
        throw 'DragDropTouch instance already created.';
      var t = !1;
      if (
        (document.addEventListener('test', null, {
          get passive() {
            return (t = !0);
          }
        }),
        'ontouchstart' in document)
      ) {
        var e = !!t && { passive: !0, capture: !1 },
          a = document,
          n = this._touchstart.bind(this),
          o = this._touchmove.bind(this),
          i = this._touchend.bind(this);
        a.addEventListener('touchstart', n, e),
          a.addEventListener('touchmove', o, e),
          a.addEventListener('touchend', i),
          a.addEventListener('touchcancel', i);
      }
    }
    (o._instance = new o()),
      (o._THRESHOLD = 5),
      (o._OPACITY = 0.5),
      (o._DBLCLICK = 500),
      (o._CTXMENU = 900),
      (o._rmvAtts = 'id,class,style,draggable'.split(',')),
      (o._kbdProps = 'altKey,ctrlKey,metaKey,shiftKey'.split(',')),
      (o._ptProps = 'pageX,pageY,clientX,clientY,screenX,screenY'.split(',')),
      (t.DragDropTouch = o);
  })((DragDropTouch = DragDropTouch || {}));
